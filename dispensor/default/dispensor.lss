
dispensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000009be  00000a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080012e  0080012e  00000a80  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000a80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000011e3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00001212  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000018d5  00000000  00000000  0000123a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000256  00000000  00000000  00002b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005a9  00000000  00000000  00002d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000348  00000000  00000000  00003310  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030e  00000000  00000000  00003658  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005cc  00000000  00000000  00003966  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00003f32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee eb       	ldi	r30, 0xBE	; 190
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 32       	cpi	r26, 0x2E	; 46
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e2       	ldi	r26, 0x2E	; 46
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 33       	cpi	r26, 0x34	; 52
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 d5 04 	call	0x9aa	; 0x9aa <main>
  c6:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <portOut>:
#define LCD_BUSY            7      // DB7: LCD is busy


void portOut(void)
{
	DDRA = 0xFF;	
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xFF;	//제어선은 항상 출력용	
  d2:	81 bb       	out	0x11, r24	; 17
  d4:	08 95       	ret

000000d6 <portIn>:
}

void portIn(void)
{
	DDRA = 0x00;	
  d6:	1a ba       	out	0x1a, r1	; 26
	DDRD = 0xFF;	 //제어선은 항상 출력용 	
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	81 bb       	out	0x11, r24	; 17
  dc:	08 95       	ret

000000de <writeCTRL>:
}

void writeCTRL(unsigned char ch)
{
	LCD_CTRL = (1<<LCD_EN) | (0<<LCD_RW) | (0<<LCD_RS);
  de:	94 e0       	ldi	r25, 0x04	; 4
  e0:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	90 e1       	ldi	r25, 0x10	; 16
  e4:	9a 95       	dec	r25
  e6:	f1 f7       	brne	.-4      	; 0xe4 <writeCTRL+0x6>
  e8:	00 c0       	rjmp	.+0      	; 0xea <writeCTRL+0xc>
	_delay_us(50); 

	LCD_INST = ch;
  ea:	8b bb       	out	0x1b, r24	; 27
  ec:	80 e1       	ldi	r24, 0x10	; 16
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <writeCTRL+0x10>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <writeCTRL+0x16>
	_delay_us(50); 

	LCD_CTRL = (0<<LCD_EN) | (0<<LCD_RW) | (0<<LCD_RS); 
  f4:	12 ba       	out	0x12, r1	; 18
  f6:	08 95       	ret

000000f8 <writeChar>:
}

void writeChar(unsigned char ch)
{
	LCD_CTRL = (1<<LCD_EN) | (0<<LCD_RW) | (1<<LCD_RS);
  f8:	95 e0       	ldi	r25, 0x05	; 5
  fa:	92 bb       	out	0x12, r25	; 18
  fc:	90 e1       	ldi	r25, 0x10	; 16
  fe:	9a 95       	dec	r25
 100:	f1 f7       	brne	.-4      	; 0xfe <writeChar+0x6>
 102:	00 c0       	rjmp	.+0      	; 0x104 <writeChar+0xc>
	_delay_us(50); 

	LCD_DATA = ch;
 104:	8b bb       	out	0x1b, r24	; 27
 106:	80 e1       	ldi	r24, 0x10	; 16
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <writeChar+0x10>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <writeChar+0x16>
	_delay_us(50); 

	LCD_CTRL = (0<<LCD_EN) | (0<<LCD_RW) | (0<<LCD_RS); 
 10e:	12 ba       	out	0x12, r1	; 18
 110:	08 95       	ret

00000112 <writeSTR>:
}

void writeSTR(unsigned char *str)
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ec 01       	movw	r28, r24
	while(*str != 0)
 118:	02 c0       	rjmp	.+4      	; 0x11e <writeSTR+0xc>
	{
		writeChar(*str);
 11a:	0e 94 7c 00 	call	0xf8	; 0xf8 <writeChar>
	LCD_CTRL = (0<<LCD_EN) | (0<<LCD_RW) | (0<<LCD_RS); 
}

void writeSTR(unsigned char *str)
{
	while(*str != 0)
 11e:	89 91       	ld	r24, Y+
 120:	81 11       	cpse	r24, r1
 122:	fb cf       	rjmp	.-10     	; 0x11a <writeSTR+0x8>
	{
		writeChar(*str);
		str++;
	}
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <readChar>:

unsigned char readChar(void)
{
	unsigned char data;

	LCD_CTRL = (1<<LCD_EN) | (1<<LCD_RW) | (1<<LCD_RS);
 12a:	87 e0       	ldi	r24, 0x07	; 7
 12c:	82 bb       	out	0x12, r24	; 18
 12e:	80 e1       	ldi	r24, 0x10	; 16
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <readChar+0x6>
 134:	00 c0       	rjmp	.+0      	; 0x136 <readChar+0xc>
	_delay_us(50); 

	data = LCD_PIN;
 136:	89 b3       	in	r24, 0x19	; 25
 138:	90 e1       	ldi	r25, 0x10	; 16
 13a:	9a 95       	dec	r25
 13c:	f1 f7       	brne	.-4      	; 0x13a <readChar+0x10>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <readChar+0x16>
	_delay_us(50); 

	LCD_CTRL = (0<<LCD_EN) | (0<<LCD_RW) | (0<<LCD_RS); 
 140:	12 ba       	out	0x12, r1	; 18

	return data;
}
 142:	08 95       	ret

00000144 <readBF_AC>:

unsigned char readBF_AC(void)
{
	unsigned char data;
	LCD_CTRL = (1<<LCD_EN) | (1<<LCD_RW) | (0<<LCD_RS);
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	82 bb       	out	0x12, r24	; 18
 148:	80 e1       	ldi	r24, 0x10	; 16
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <readBF_AC+0x6>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <readBF_AC+0xc>
	_delay_us(50); 
	data = LCD_PIN;
 150:	89 b3       	in	r24, 0x19	; 25
 152:	90 e1       	ldi	r25, 0x10	; 16
 154:	9a 95       	dec	r25
 156:	f1 f7       	brne	.-4      	; 0x154 <readBF_AC+0x10>
 158:	00 c0       	rjmp	.+0      	; 0x15a <readBF_AC+0x16>
	_delay_us(50); 
	LCD_CTRL = (0<<LCD_EN) | (0<<LCD_RW) | (0<<LCD_RS); 
 15a:	12 ba       	out	0x12, r1	; 18
	return data;
}
 15c:	08 95       	ret

0000015e <waitBusy>:

void waitBusy(void)
{
	portIn();
 15e:	0e 94 6b 00 	call	0xd6	; 0xd6 <portIn>
	while ((readBF_AC() & (1<<LCD_BUSY)) != 0);
 162:	0e 94 a2 00 	call	0x144	; 0x144 <readBF_AC>
 166:	87 fd       	sbrc	r24, 7
 168:	fc cf       	rjmp	.-8      	; 0x162 <waitBusy+0x4>
	portOut();
 16a:	0c 94 67 00 	jmp	0xce	; 0xce <portOut>

0000016e <setCGRAM_ADDR>:
}

void setCGRAM_ADDR()
{
	writeCTRL(1<<LCD_CGRAM);
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	83 ef       	ldi	r24, 0xF3	; 243
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <setCGRAM_ADDR+0xa>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <setCGRAM_ADDR+0x10>
 17e:	00 00       	nop
 180:	08 95       	ret

00000182 <setDDRAM_ADDR>:
	_delay_ms(2);
}

void setDDRAM_ADDR()
{
	writeCTRL(1<<LCD_DDRAM);
 182:	80 e8       	ldi	r24, 0x80	; 128
 184:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 188:	83 ef       	ldi	r24, 0xF3	; 243
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <setDDRAM_ADDR+0xa>
 190:	00 c0       	rjmp	.+0      	; 0x192 <setDDRAM_ADDR+0x10>
 192:	00 00       	nop
 194:	08 95       	ret

00000196 <setPosition>:

void setPosition(unsigned char row, unsigned char col) 
{
	unsigned char addr;
	
	switch(row)
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	19 f4       	brne	.+6      	; 0x1a0 <setPosition+0xa>
	{
		case 0:  addr = 0x00 + col; 
				 break;
		case 1:  addr = 0x40 + col; 
 19a:	86 2f       	mov	r24, r22
 19c:	80 5c       	subi	r24, 0xC0	; 192
				 break;
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <setPosition+0xc>
{
	unsigned char addr;
	
	switch(row)
	{
		case 0:  addr = 0x00 + col; 
 1a0:	86 2f       	mov	r24, r22
		case 1:  addr = 0x40 + col; 
				 break;
		default: addr = 0x00 + col;
	}

	writeCTRL(1<<LCD_DDRAM | addr); 
 1a2:	80 68       	ori	r24, 0x80	; 128
 1a4:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 1a8:	83 ef       	ldi	r24, 0xF3	; 243
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <setPosition+0x16>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <setPosition+0x1c>
 1b2:	00 00       	nop
 1b4:	08 95       	ret

000001b6 <blinkCursor>:
	_delay_ms(2);
}

void blinkCursor(void)
{
	 writeCTRL((1<<LCD_ON_CTRL)   | (1<<LCD_ON_DISPLAY) |
 1b6:	8f e0       	ldi	r24, 0x0F	; 15
 1b8:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 1bc:	83 ef       	ldi	r24, 0xF3	; 243
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <blinkCursor+0xa>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <blinkCursor+0x10>
 1c6:	00 00       	nop
 1c8:	08 95       	ret

000001ca <displayShiftLeft>:
	 _delay_ms(2);
}

void displayShiftLeft(void)
{
	 writeCTRL((1<<LCD_MOVE) | (1<<LCD_MOVE_DISP) | (0<<LCD_MOVE_RIGHT));
 1ca:	88 e1       	ldi	r24, 0x18	; 24
 1cc:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 1d0:	83 ef       	ldi	r24, 0xF3	; 243
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <displayShiftLeft+0xa>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <displayShiftLeft+0x10>
 1da:	00 00       	nop
 1dc:	08 95       	ret

000001de <displayShiftRight>:
	 _delay_ms(2);
}

void displayShiftRight(void)
{
	 writeCTRL((1<<LCD_MOVE) | (1<<LCD_MOVE_DISP) | (1<<LCD_MOVE_RIGHT));
 1de:	8c e1       	ldi	r24, 0x1C	; 28
 1e0:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 1e4:	83 ef       	ldi	r24, 0xF3	; 243
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <displayShiftRight+0xa>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <displayShiftRight+0x10>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <cursorShiftLeft>:
	 _delay_ms(2);
}

void cursorShiftLeft(void)
{
	 writeCTRL((1<<LCD_MOVE) | (0<<LCD_MOVE_DISP) | (0<<LCD_MOVE_RIGHT));
 1f2:	80 e1       	ldi	r24, 0x10	; 16
 1f4:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 1f8:	83 ef       	ldi	r24, 0xF3	; 243
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <cursorShiftLeft+0xa>
 200:	00 c0       	rjmp	.+0      	; 0x202 <cursorShiftLeft+0x10>
 202:	00 00       	nop
 204:	08 95       	ret

00000206 <cursorShiftRight>:
	 _delay_ms(2);
}

void cursorShiftRight(void)
{
	 writeCTRL((1<<LCD_MOVE) | (0<<LCD_MOVE_DISP) | (1<<LCD_MOVE_RIGHT));
 206:	84 e1       	ldi	r24, 0x14	; 20
 208:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 20c:	83 ef       	ldi	r24, 0xF3	; 243
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <cursorShiftRight+0xa>
 214:	00 c0       	rjmp	.+0      	; 0x216 <cursorShiftRight+0x10>
 216:	00 00       	nop
 218:	08 95       	ret

0000021a <entryForward>:
	 _delay_ms(2);
}

void entryForward(void)
{
	 writeCTRL((1<<LCD_ENTRY_MODE) | (1<<LCD_ENTRY_INC) | (0<<LCD_ENTRY_SHIFT));
 21a:	86 e0       	ldi	r24, 0x06	; 6
 21c:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 220:	83 ef       	ldi	r24, 0xF3	; 243
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <entryForward+0xa>
 228:	00 c0       	rjmp	.+0      	; 0x22a <entryForward+0x10>
 22a:	00 00       	nop
 22c:	08 95       	ret

0000022e <entryReward>:
	 _delay_ms(2);
}

void entryReward(void)
{
	 writeCTRL((1<<LCD_ENTRY_MODE) | (0<<LCD_ENTRY_INC) | (0<<LCD_ENTRY_SHIFT));
 22e:	84 e0       	ldi	r24, 0x04	; 4
 230:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 234:	83 ef       	ldi	r24, 0xF3	; 243
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <entryReward+0xa>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <entryReward+0x10>
 23e:	00 00       	nop
 240:	08 95       	ret

00000242 <entryForwardShift>:
	 _delay_ms(2);
}

void entryForwardShift(void)
{
	 writeCTRL((1<<LCD_ENTRY_MODE) | (1<<LCD_ENTRY_INC) | (1<<LCD_ENTRY_SHIFT));
 242:	87 e0       	ldi	r24, 0x07	; 7
 244:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 248:	83 ef       	ldi	r24, 0xF3	; 243
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <entryForwardShift+0xa>
 250:	00 c0       	rjmp	.+0      	; 0x252 <entryForwardShift+0x10>
 252:	00 00       	nop
 254:	08 95       	ret

00000256 <entryRewardShift>:
	 _delay_ms(2);
}

void entryRewardShift(void)
{
	 writeCTRL((1<<LCD_ENTRY_MODE) | (0<<LCD_ENTRY_INC) | (1<<LCD_ENTRY_SHIFT));
 256:	85 e0       	ldi	r24, 0x05	; 5
 258:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 25c:	83 ef       	ldi	r24, 0xF3	; 243
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <entryRewardShift+0xa>
 264:	00 c0       	rjmp	.+0      	; 0x266 <entryRewardShift+0x10>
 266:	00 00       	nop
 268:	08 95       	ret

0000026a <clearLCD>:
	 _delay_ms(2);
}

void clearLCD(void)	
{
       writeCTRL(1<<LCD_CLR);
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 270:	83 ef       	ldi	r24, 0xF3	; 243
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <clearLCD+0xa>
 278:	00 c0       	rjmp	.+0      	; 0x27a <clearLCD+0x10>
 27a:	00 00       	nop
 27c:	08 95       	ret

0000027e <returnHome>:
       _delay_ms(2);
}

void returnHome(void)
{
	   writeCTRL(LCD_HOME);
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 284:	83 ef       	ldi	r24, 0xF3	; 243
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <returnHome+0xa>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <returnHome+0x10>
 28e:	00 00       	nop
 290:	08 95       	ret

00000292 <set10Dots>:
}


void set10Dots(void)
{
	 writeCTRL((1<<LCD_FUNCTION) | (1<<LCD_FUNCTION_8BIT) |
 292:	84 e3       	ldi	r24, 0x34	; 52
 294:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 298:	83 ef       	ldi	r24, 0xF3	; 243
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <set10Dots+0xa>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <set10Dots+0x10>
 2a2:	00 00       	nop
 2a4:	08 95       	ret

000002a6 <LCDInit>:
	 _delay_ms(2);
}

void LCDInit()
{
	writeCTRL((1<<LCD_FUNCTION) | (1<<LCD_FUNCTION_8BIT) |
 2a6:	88 e3       	ldi	r24, 0x38	; 56
 2a8:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 2ac:	83 ef       	ldi	r24, 0xF3	; 243
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCDInit+0xa>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCDInit+0x10>
 2b6:	00 00       	nop
			  (1<<LCD_FUNCTION_2LINES) | (0<<LCD_FUNCTION_10DOTS));
	_delay_ms(2);

	writeCTRL((1<<LCD_ON_CTRL) | (1<<LCD_ON_DISPLAY) |
 2b8:	8e e0       	ldi	r24, 0x0E	; 14
 2ba:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 2be:	83 ef       	ldi	r24, 0xF3	; 243
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCDInit+0x1c>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCDInit+0x22>
 2c8:	00 00       	nop
			  (1<<LCD_ON_CURSOR) | (0<<LCD_ON_BLINK));
	_delay_ms(2);

	writeCTRL((1<<LCD_CLR));
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 2d0:	83 ef       	ldi	r24, 0xF3	; 243
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCDInit+0x2e>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCDInit+0x34>
 2da:	00 00       	nop
	_delay_ms(2);

	writeCTRL((1<<LCD_ENTRY_MODE) | (1<<LCD_ENTRY_INC) | (0<<LCD_ENTRY_SHIFT));
 2dc:	86 e0       	ldi	r24, 0x06	; 6
 2de:	0e 94 6f 00 	call	0xde	; 0xde <writeCTRL>
 2e2:	83 ef       	ldi	r24, 0xF3	; 243
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LCDInit+0x40>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LCDInit+0x46>
 2ec:	00 00       	nop
 2ee:	08 95       	ret

000002f0 <motor_a>:
int i;

void motor_a()
{
	for(i=0; i<3; i++)
 2f0:	10 92 32 01 	sts	0x0132, r1
 2f4:	10 92 31 01 	sts	0x0131, r1
	{
		PORTB = 0x01;
 2f8:	21 e0       	ldi	r18, 0x01	; 1
int i;

void motor_a()
{
	for(i=0; i<3; i++)
 2fa:	13 c0       	rjmp	.+38     	; 0x322 <motor_a+0x32>
	{
		PORTB = 0x01;
 2fc:	28 bb       	out	0x18, r18	; 24
 2fe:	3f e3       	ldi	r19, 0x3F	; 63
 300:	8d e0       	ldi	r24, 0x0D	; 13
 302:	93 e0       	ldi	r25, 0x03	; 3
 304:	31 50       	subi	r19, 0x01	; 1
 306:	80 40       	sbci	r24, 0x00	; 0
 308:	90 40       	sbci	r25, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <motor_a+0x14>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <motor_a+0x1e>
 30e:	00 00       	nop
int i;

void motor_a()
{
	for(i=0; i<3; i++)
 310:	80 91 31 01 	lds	r24, 0x0131
 314:	90 91 32 01 	lds	r25, 0x0132
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	90 93 32 01 	sts	0x0132, r25
 31e:	80 93 31 01 	sts	0x0131, r24
 322:	80 91 31 01 	lds	r24, 0x0131
 326:	90 91 32 01 	lds	r25, 0x0132
 32a:	03 97       	sbiw	r24, 0x03	; 3
 32c:	3c f3       	brlt	.-50     	; 0x2fc <motor_a+0xc>
	{
		PORTB = 0x01;
		_delay_ms(1000);
	}
	PORTB = 0x00;
 32e:	18 ba       	out	0x18, r1	; 24
 330:	08 95       	ret

00000332 <motor_b>:
}


void motor_b()
{
	for(i=0; i<6; i++)
 332:	10 92 32 01 	sts	0x0132, r1
 336:	10 92 31 01 	sts	0x0131, r1
	{
		PORTB = 0x01;
 33a:	21 e0       	ldi	r18, 0x01	; 1
}


void motor_b()
{
	for(i=0; i<6; i++)
 33c:	13 c0       	rjmp	.+38     	; 0x364 <motor_b+0x32>
	{
		PORTB = 0x01;
 33e:	28 bb       	out	0x18, r18	; 24
 340:	3f e3       	ldi	r19, 0x3F	; 63
 342:	8d e0       	ldi	r24, 0x0D	; 13
 344:	93 e0       	ldi	r25, 0x03	; 3
 346:	31 50       	subi	r19, 0x01	; 1
 348:	80 40       	sbci	r24, 0x00	; 0
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <motor_b+0x14>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <motor_b+0x1e>
 350:	00 00       	nop
}


void motor_b()
{
	for(i=0; i<6; i++)
 352:	80 91 31 01 	lds	r24, 0x0131
 356:	90 91 32 01 	lds	r25, 0x0132
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	90 93 32 01 	sts	0x0132, r25
 360:	80 93 31 01 	sts	0x0131, r24
 364:	80 91 31 01 	lds	r24, 0x0131
 368:	90 91 32 01 	lds	r25, 0x0132
 36c:	06 97       	sbiw	r24, 0x06	; 6
 36e:	3c f3       	brlt	.-50     	; 0x33e <motor_b+0xc>
	{
		PORTB = 0x01;
		_delay_ms(1000);
	}
	PORTB = 0x00;
 370:	18 ba       	out	0x18, r1	; 24
 372:	08 95       	ret

00000374 <motor_c>:
}


void motor_c()
{
	for(i=0; i<9; i++)
 374:	10 92 32 01 	sts	0x0132, r1
 378:	10 92 31 01 	sts	0x0131, r1
	{
		PORTB = 0x01;
 37c:	21 e0       	ldi	r18, 0x01	; 1
}


void motor_c()
{
	for(i=0; i<9; i++)
 37e:	13 c0       	rjmp	.+38     	; 0x3a6 <motor_c+0x32>
	{
		PORTB = 0x01;
 380:	28 bb       	out	0x18, r18	; 24
 382:	3f e3       	ldi	r19, 0x3F	; 63
 384:	8d e0       	ldi	r24, 0x0D	; 13
 386:	93 e0       	ldi	r25, 0x03	; 3
 388:	31 50       	subi	r19, 0x01	; 1
 38a:	80 40       	sbci	r24, 0x00	; 0
 38c:	90 40       	sbci	r25, 0x00	; 0
 38e:	e1 f7       	brne	.-8      	; 0x388 <motor_c+0x14>
 390:	00 c0       	rjmp	.+0      	; 0x392 <motor_c+0x1e>
 392:	00 00       	nop
}


void motor_c()
{
	for(i=0; i<9; i++)
 394:	80 91 31 01 	lds	r24, 0x0131
 398:	90 91 32 01 	lds	r25, 0x0132
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	90 93 32 01 	sts	0x0132, r25
 3a2:	80 93 31 01 	sts	0x0131, r24
 3a6:	80 91 31 01 	lds	r24, 0x0131
 3aa:	90 91 32 01 	lds	r25, 0x0132
 3ae:	09 97       	sbiw	r24, 0x09	; 9
 3b0:	3c f3       	brlt	.-50     	; 0x380 <motor_c+0xc>
	{
		PORTB = 0x01;
		_delay_ms(1000);
	}
	PORTB = 0x00;
 3b2:	18 ba       	out	0x18, r1	; 24
 3b4:	08 95       	ret

000003b6 <motor_d>:
}

void motor_d()
{
	for(i=0; i<12; i++)
 3b6:	10 92 32 01 	sts	0x0132, r1
 3ba:	10 92 31 01 	sts	0x0131, r1
	{
		PORTB = 0x01;
 3be:	21 e0       	ldi	r18, 0x01	; 1
	PORTB = 0x00;
}

void motor_d()
{
	for(i=0; i<12; i++)
 3c0:	13 c0       	rjmp	.+38     	; 0x3e8 <motor_d+0x32>
	{
		PORTB = 0x01;
 3c2:	28 bb       	out	0x18, r18	; 24
 3c4:	3f e3       	ldi	r19, 0x3F	; 63
 3c6:	8d e0       	ldi	r24, 0x0D	; 13
 3c8:	93 e0       	ldi	r25, 0x03	; 3
 3ca:	31 50       	subi	r19, 0x01	; 1
 3cc:	80 40       	sbci	r24, 0x00	; 0
 3ce:	90 40       	sbci	r25, 0x00	; 0
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <motor_d+0x14>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <motor_d+0x1e>
 3d4:	00 00       	nop
	PORTB = 0x00;
}

void motor_d()
{
	for(i=0; i<12; i++)
 3d6:	80 91 31 01 	lds	r24, 0x0131
 3da:	90 91 32 01 	lds	r25, 0x0132
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	90 93 32 01 	sts	0x0132, r25
 3e4:	80 93 31 01 	sts	0x0131, r24
 3e8:	80 91 31 01 	lds	r24, 0x0131
 3ec:	90 91 32 01 	lds	r25, 0x0132
 3f0:	0c 97       	sbiw	r24, 0x0c	; 12
 3f2:	3c f3       	brlt	.-50     	; 0x3c2 <motor_d+0xc>
	{
		PORTB = 0x01;
		_delay_ms(1000);
	}
	PORTB = 0x00;
 3f4:	18 ba       	out	0x18, r1	; 24
 3f6:	08 95       	ret

000003f8 <motor_a1>:
}


void motor_a1()
{
	for(i=0; i<3; i++)
 3f8:	10 92 32 01 	sts	0x0132, r1
 3fc:	10 92 31 01 	sts	0x0131, r1
	{
		PORTB = 0x02;
 400:	22 e0       	ldi	r18, 0x02	; 2
}


void motor_a1()
{
	for(i=0; i<3; i++)
 402:	13 c0       	rjmp	.+38     	; 0x42a <motor_a1+0x32>
	{
		PORTB = 0x02;
 404:	28 bb       	out	0x18, r18	; 24
 406:	3f e3       	ldi	r19, 0x3F	; 63
 408:	8d e0       	ldi	r24, 0x0D	; 13
 40a:	93 e0       	ldi	r25, 0x03	; 3
 40c:	31 50       	subi	r19, 0x01	; 1
 40e:	80 40       	sbci	r24, 0x00	; 0
 410:	90 40       	sbci	r25, 0x00	; 0
 412:	e1 f7       	brne	.-8      	; 0x40c <motor_a1+0x14>
 414:	00 c0       	rjmp	.+0      	; 0x416 <motor_a1+0x1e>
 416:	00 00       	nop
}


void motor_a1()
{
	for(i=0; i<3; i++)
 418:	80 91 31 01 	lds	r24, 0x0131
 41c:	90 91 32 01 	lds	r25, 0x0132
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	90 93 32 01 	sts	0x0132, r25
 426:	80 93 31 01 	sts	0x0131, r24
 42a:	80 91 31 01 	lds	r24, 0x0131
 42e:	90 91 32 01 	lds	r25, 0x0132
 432:	03 97       	sbiw	r24, 0x03	; 3
 434:	3c f3       	brlt	.-50     	; 0x404 <motor_a1+0xc>
	{
		PORTB = 0x02;
		_delay_ms(1000);
	}
	PORTB = 0x00;
 436:	18 ba       	out	0x18, r1	; 24
 438:	08 95       	ret

0000043a <motor_b1>:
}


void motor_b1()
{
	for(i=0; i<6; i++)
 43a:	10 92 32 01 	sts	0x0132, r1
 43e:	10 92 31 01 	sts	0x0131, r1
	{
		PORTB = 0x02;
 442:	22 e0       	ldi	r18, 0x02	; 2
}


void motor_b1()
{
	for(i=0; i<6; i++)
 444:	13 c0       	rjmp	.+38     	; 0x46c <motor_b1+0x32>
	{
		PORTB = 0x02;
 446:	28 bb       	out	0x18, r18	; 24
 448:	3f e3       	ldi	r19, 0x3F	; 63
 44a:	8d e0       	ldi	r24, 0x0D	; 13
 44c:	93 e0       	ldi	r25, 0x03	; 3
 44e:	31 50       	subi	r19, 0x01	; 1
 450:	80 40       	sbci	r24, 0x00	; 0
 452:	90 40       	sbci	r25, 0x00	; 0
 454:	e1 f7       	brne	.-8      	; 0x44e <motor_b1+0x14>
 456:	00 c0       	rjmp	.+0      	; 0x458 <motor_b1+0x1e>
 458:	00 00       	nop
}


void motor_b1()
{
	for(i=0; i<6; i++)
 45a:	80 91 31 01 	lds	r24, 0x0131
 45e:	90 91 32 01 	lds	r25, 0x0132
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	90 93 32 01 	sts	0x0132, r25
 468:	80 93 31 01 	sts	0x0131, r24
 46c:	80 91 31 01 	lds	r24, 0x0131
 470:	90 91 32 01 	lds	r25, 0x0132
 474:	06 97       	sbiw	r24, 0x06	; 6
 476:	3c f3       	brlt	.-50     	; 0x446 <motor_b1+0xc>
	{
		PORTB = 0x02;
		_delay_ms(1000);
	}
	PORTB = 0x00;
 478:	18 ba       	out	0x18, r1	; 24
 47a:	08 95       	ret

0000047c <motor_c1>:
}


void motor_c1()
{
	for(i=0; i<9; i++)
 47c:	10 92 32 01 	sts	0x0132, r1
 480:	10 92 31 01 	sts	0x0131, r1
	{
		PORTB = 0x02;
 484:	22 e0       	ldi	r18, 0x02	; 2
}


void motor_c1()
{
	for(i=0; i<9; i++)
 486:	13 c0       	rjmp	.+38     	; 0x4ae <motor_c1+0x32>
	{
		PORTB = 0x02;
 488:	28 bb       	out	0x18, r18	; 24
 48a:	3f e3       	ldi	r19, 0x3F	; 63
 48c:	8d e0       	ldi	r24, 0x0D	; 13
 48e:	93 e0       	ldi	r25, 0x03	; 3
 490:	31 50       	subi	r19, 0x01	; 1
 492:	80 40       	sbci	r24, 0x00	; 0
 494:	90 40       	sbci	r25, 0x00	; 0
 496:	e1 f7       	brne	.-8      	; 0x490 <motor_c1+0x14>
 498:	00 c0       	rjmp	.+0      	; 0x49a <motor_c1+0x1e>
 49a:	00 00       	nop
}


void motor_c1()
{
	for(i=0; i<9; i++)
 49c:	80 91 31 01 	lds	r24, 0x0131
 4a0:	90 91 32 01 	lds	r25, 0x0132
 4a4:	01 96       	adiw	r24, 0x01	; 1
 4a6:	90 93 32 01 	sts	0x0132, r25
 4aa:	80 93 31 01 	sts	0x0131, r24
 4ae:	80 91 31 01 	lds	r24, 0x0131
 4b2:	90 91 32 01 	lds	r25, 0x0132
 4b6:	09 97       	sbiw	r24, 0x09	; 9
 4b8:	3c f3       	brlt	.-50     	; 0x488 <motor_c1+0xc>
	{
		PORTB = 0x02;
		_delay_ms(1000);
	}
	PORTB = 0x00;
 4ba:	18 ba       	out	0x18, r1	; 24
 4bc:	08 95       	ret

000004be <motor_d1>:
}


void motor_d1()
{
	for(i=0; i<12; i++)
 4be:	10 92 32 01 	sts	0x0132, r1
 4c2:	10 92 31 01 	sts	0x0131, r1
	{
		PORTB = 0x02;
 4c6:	22 e0       	ldi	r18, 0x02	; 2
}


void motor_d1()
{
	for(i=0; i<12; i++)
 4c8:	13 c0       	rjmp	.+38     	; 0x4f0 <motor_d1+0x32>
	{
		PORTB = 0x02;
 4ca:	28 bb       	out	0x18, r18	; 24
 4cc:	3f e3       	ldi	r19, 0x3F	; 63
 4ce:	8d e0       	ldi	r24, 0x0D	; 13
 4d0:	93 e0       	ldi	r25, 0x03	; 3
 4d2:	31 50       	subi	r19, 0x01	; 1
 4d4:	80 40       	sbci	r24, 0x00	; 0
 4d6:	90 40       	sbci	r25, 0x00	; 0
 4d8:	e1 f7       	brne	.-8      	; 0x4d2 <motor_d1+0x14>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <motor_d1+0x1e>
 4dc:	00 00       	nop
}


void motor_d1()
{
	for(i=0; i<12; i++)
 4de:	80 91 31 01 	lds	r24, 0x0131
 4e2:	90 91 32 01 	lds	r25, 0x0132
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	90 93 32 01 	sts	0x0132, r25
 4ec:	80 93 31 01 	sts	0x0131, r24
 4f0:	80 91 31 01 	lds	r24, 0x0131
 4f4:	90 91 32 01 	lds	r25, 0x0132
 4f8:	0c 97       	sbiw	r24, 0x0c	; 12
 4fa:	3c f3       	brlt	.-50     	; 0x4ca <motor_d1+0xc>
	{
		PORTB = 0x02;
		_delay_ms(1000);
	}
	PORTB = 0x00;
 4fc:	18 ba       	out	0x18, r1	; 24
 4fe:	08 95       	ret

00000500 <motor_a2>:
}


void motor_a2()
{
	for(i=0; i<3; i++)
 500:	10 92 32 01 	sts	0x0132, r1
 504:	10 92 31 01 	sts	0x0131, r1
	{
		PORTB = 0x04;
 508:	24 e0       	ldi	r18, 0x04	; 4
}


void motor_a2()
{
	for(i=0; i<3; i++)
 50a:	13 c0       	rjmp	.+38     	; 0x532 <motor_a2+0x32>
	{
		PORTB = 0x04;
 50c:	28 bb       	out	0x18, r18	; 24
 50e:	3f e3       	ldi	r19, 0x3F	; 63
 510:	8d e0       	ldi	r24, 0x0D	; 13
 512:	93 e0       	ldi	r25, 0x03	; 3
 514:	31 50       	subi	r19, 0x01	; 1
 516:	80 40       	sbci	r24, 0x00	; 0
 518:	90 40       	sbci	r25, 0x00	; 0
 51a:	e1 f7       	brne	.-8      	; 0x514 <motor_a2+0x14>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <motor_a2+0x1e>
 51e:	00 00       	nop
}


void motor_a2()
{
	for(i=0; i<3; i++)
 520:	80 91 31 01 	lds	r24, 0x0131
 524:	90 91 32 01 	lds	r25, 0x0132
 528:	01 96       	adiw	r24, 0x01	; 1
 52a:	90 93 32 01 	sts	0x0132, r25
 52e:	80 93 31 01 	sts	0x0131, r24
 532:	80 91 31 01 	lds	r24, 0x0131
 536:	90 91 32 01 	lds	r25, 0x0132
 53a:	03 97       	sbiw	r24, 0x03	; 3
 53c:	3c f3       	brlt	.-50     	; 0x50c <motor_a2+0xc>
	{
		PORTB = 0x04;
		_delay_ms(1000);
	}
	PORTB = 0x00;
 53e:	18 ba       	out	0x18, r1	; 24
 540:	08 95       	ret

00000542 <motor_b2>:
}

void motor_b2()
{
	for(i=0; i<6; i++)
 542:	10 92 32 01 	sts	0x0132, r1
 546:	10 92 31 01 	sts	0x0131, r1
	{
		PORTB = 0x04;
 54a:	24 e0       	ldi	r18, 0x04	; 4
	PORTB = 0x00;
}

void motor_b2()
{
	for(i=0; i<6; i++)
 54c:	13 c0       	rjmp	.+38     	; 0x574 <motor_b2+0x32>
	{
		PORTB = 0x04;
 54e:	28 bb       	out	0x18, r18	; 24
 550:	3f e3       	ldi	r19, 0x3F	; 63
 552:	8d e0       	ldi	r24, 0x0D	; 13
 554:	93 e0       	ldi	r25, 0x03	; 3
 556:	31 50       	subi	r19, 0x01	; 1
 558:	80 40       	sbci	r24, 0x00	; 0
 55a:	90 40       	sbci	r25, 0x00	; 0
 55c:	e1 f7       	brne	.-8      	; 0x556 <motor_b2+0x14>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <motor_b2+0x1e>
 560:	00 00       	nop
	PORTB = 0x00;
}

void motor_b2()
{
	for(i=0; i<6; i++)
 562:	80 91 31 01 	lds	r24, 0x0131
 566:	90 91 32 01 	lds	r25, 0x0132
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	90 93 32 01 	sts	0x0132, r25
 570:	80 93 31 01 	sts	0x0131, r24
 574:	80 91 31 01 	lds	r24, 0x0131
 578:	90 91 32 01 	lds	r25, 0x0132
 57c:	06 97       	sbiw	r24, 0x06	; 6
 57e:	3c f3       	brlt	.-50     	; 0x54e <motor_b2+0xc>
	{
		PORTB = 0x04;
		_delay_ms(1000);
	}
	PORTB = 0x00;
 580:	18 ba       	out	0x18, r1	; 24
 582:	08 95       	ret

00000584 <motor_c2>:
}

void motor_c2()
{
	for(i=0; i<9; i++)
 584:	10 92 32 01 	sts	0x0132, r1
 588:	10 92 31 01 	sts	0x0131, r1
	{
		PORTB = 0x04;
 58c:	24 e0       	ldi	r18, 0x04	; 4
	PORTB = 0x00;
}

void motor_c2()
{
	for(i=0; i<9; i++)
 58e:	13 c0       	rjmp	.+38     	; 0x5b6 <motor_c2+0x32>
	{
		PORTB = 0x04;
 590:	28 bb       	out	0x18, r18	; 24
 592:	3f e3       	ldi	r19, 0x3F	; 63
 594:	8d e0       	ldi	r24, 0x0D	; 13
 596:	93 e0       	ldi	r25, 0x03	; 3
 598:	31 50       	subi	r19, 0x01	; 1
 59a:	80 40       	sbci	r24, 0x00	; 0
 59c:	90 40       	sbci	r25, 0x00	; 0
 59e:	e1 f7       	brne	.-8      	; 0x598 <motor_c2+0x14>
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <motor_c2+0x1e>
 5a2:	00 00       	nop
	PORTB = 0x00;
}

void motor_c2()
{
	for(i=0; i<9; i++)
 5a4:	80 91 31 01 	lds	r24, 0x0131
 5a8:	90 91 32 01 	lds	r25, 0x0132
 5ac:	01 96       	adiw	r24, 0x01	; 1
 5ae:	90 93 32 01 	sts	0x0132, r25
 5b2:	80 93 31 01 	sts	0x0131, r24
 5b6:	80 91 31 01 	lds	r24, 0x0131
 5ba:	90 91 32 01 	lds	r25, 0x0132
 5be:	09 97       	sbiw	r24, 0x09	; 9
 5c0:	3c f3       	brlt	.-50     	; 0x590 <motor_c2+0xc>
	{
		PORTB = 0x04;
		_delay_ms(1000);
	}
	PORTB = 0x00;
 5c2:	18 ba       	out	0x18, r1	; 24
 5c4:	08 95       	ret

000005c6 <motor_d2>:
}

void motor_d2()
{
	for(i=0; i<12; i++)
 5c6:	10 92 32 01 	sts	0x0132, r1
 5ca:	10 92 31 01 	sts	0x0131, r1
	{
		PORTB = 0x04;
 5ce:	24 e0       	ldi	r18, 0x04	; 4
	PORTB = 0x00;
}

void motor_d2()
{
	for(i=0; i<12; i++)
 5d0:	13 c0       	rjmp	.+38     	; 0x5f8 <motor_d2+0x32>
	{
		PORTB = 0x04;
 5d2:	28 bb       	out	0x18, r18	; 24
 5d4:	3f e3       	ldi	r19, 0x3F	; 63
 5d6:	8d e0       	ldi	r24, 0x0D	; 13
 5d8:	93 e0       	ldi	r25, 0x03	; 3
 5da:	31 50       	subi	r19, 0x01	; 1
 5dc:	80 40       	sbci	r24, 0x00	; 0
 5de:	90 40       	sbci	r25, 0x00	; 0
 5e0:	e1 f7       	brne	.-8      	; 0x5da <motor_d2+0x14>
 5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <motor_d2+0x1e>
 5e4:	00 00       	nop
	PORTB = 0x00;
}

void motor_d2()
{
	for(i=0; i<12; i++)
 5e6:	80 91 31 01 	lds	r24, 0x0131
 5ea:	90 91 32 01 	lds	r25, 0x0132
 5ee:	01 96       	adiw	r24, 0x01	; 1
 5f0:	90 93 32 01 	sts	0x0132, r25
 5f4:	80 93 31 01 	sts	0x0131, r24
 5f8:	80 91 31 01 	lds	r24, 0x0131
 5fc:	90 91 32 01 	lds	r25, 0x0132
 600:	0c 97       	sbiw	r24, 0x0c	; 12
 602:	3c f3       	brlt	.-50     	; 0x5d2 <motor_d2+0xc>
	{
		PORTB = 0x04;
		_delay_ms(1000);
	}
	PORTB = 0x00;
 604:	18 ba       	out	0x18, r1	; 24
 606:	08 95       	ret

00000608 <motor_a3>:
}


void motor_a3()
{
	for(i=0; i<3; i++)
 608:	10 92 32 01 	sts	0x0132, r1
 60c:	10 92 31 01 	sts	0x0131, r1
	{
		PORTB = 0x08;
 610:	28 e0       	ldi	r18, 0x08	; 8
}


void motor_a3()
{
	for(i=0; i<3; i++)
 612:	13 c0       	rjmp	.+38     	; 0x63a <motor_a3+0x32>
	{
		PORTB = 0x08;
 614:	28 bb       	out	0x18, r18	; 24
 616:	3f e3       	ldi	r19, 0x3F	; 63
 618:	8d e0       	ldi	r24, 0x0D	; 13
 61a:	93 e0       	ldi	r25, 0x03	; 3
 61c:	31 50       	subi	r19, 0x01	; 1
 61e:	80 40       	sbci	r24, 0x00	; 0
 620:	90 40       	sbci	r25, 0x00	; 0
 622:	e1 f7       	brne	.-8      	; 0x61c <motor_a3+0x14>
 624:	00 c0       	rjmp	.+0      	; 0x626 <motor_a3+0x1e>
 626:	00 00       	nop
}


void motor_a3()
{
	for(i=0; i<3; i++)
 628:	80 91 31 01 	lds	r24, 0x0131
 62c:	90 91 32 01 	lds	r25, 0x0132
 630:	01 96       	adiw	r24, 0x01	; 1
 632:	90 93 32 01 	sts	0x0132, r25
 636:	80 93 31 01 	sts	0x0131, r24
 63a:	80 91 31 01 	lds	r24, 0x0131
 63e:	90 91 32 01 	lds	r25, 0x0132
 642:	03 97       	sbiw	r24, 0x03	; 3
 644:	3c f3       	brlt	.-50     	; 0x614 <motor_a3+0xc>
	{
		PORTB = 0x08;
		_delay_ms(1000);
	}
	PORTB = 0x00;
 646:	18 ba       	out	0x18, r1	; 24
 648:	08 95       	ret

0000064a <motor_b3>:
}

void motor_b3()
{
	for(i=0; i<6; i++)
 64a:	10 92 32 01 	sts	0x0132, r1
 64e:	10 92 31 01 	sts	0x0131, r1
	{
		PORTB = 0x08;
 652:	28 e0       	ldi	r18, 0x08	; 8
	PORTB = 0x00;
}

void motor_b3()
{
	for(i=0; i<6; i++)
 654:	13 c0       	rjmp	.+38     	; 0x67c <motor_b3+0x32>
	{
		PORTB = 0x08;
 656:	28 bb       	out	0x18, r18	; 24
 658:	3f e3       	ldi	r19, 0x3F	; 63
 65a:	8d e0       	ldi	r24, 0x0D	; 13
 65c:	93 e0       	ldi	r25, 0x03	; 3
 65e:	31 50       	subi	r19, 0x01	; 1
 660:	80 40       	sbci	r24, 0x00	; 0
 662:	90 40       	sbci	r25, 0x00	; 0
 664:	e1 f7       	brne	.-8      	; 0x65e <motor_b3+0x14>
 666:	00 c0       	rjmp	.+0      	; 0x668 <motor_b3+0x1e>
 668:	00 00       	nop
	PORTB = 0x00;
}

void motor_b3()
{
	for(i=0; i<6; i++)
 66a:	80 91 31 01 	lds	r24, 0x0131
 66e:	90 91 32 01 	lds	r25, 0x0132
 672:	01 96       	adiw	r24, 0x01	; 1
 674:	90 93 32 01 	sts	0x0132, r25
 678:	80 93 31 01 	sts	0x0131, r24
 67c:	80 91 31 01 	lds	r24, 0x0131
 680:	90 91 32 01 	lds	r25, 0x0132
 684:	06 97       	sbiw	r24, 0x06	; 6
 686:	3c f3       	brlt	.-50     	; 0x656 <motor_b3+0xc>
	{
		PORTB = 0x08;
		_delay_ms(1000);
	}
	PORTB = 0x00;
 688:	18 ba       	out	0x18, r1	; 24
 68a:	08 95       	ret

0000068c <motor_c3>:
}


void motor_c3()
{
	for(i=0; i<9; i++)
 68c:	10 92 32 01 	sts	0x0132, r1
 690:	10 92 31 01 	sts	0x0131, r1
	{
		PORTB = 0x08;
 694:	28 e0       	ldi	r18, 0x08	; 8
}


void motor_c3()
{
	for(i=0; i<9; i++)
 696:	13 c0       	rjmp	.+38     	; 0x6be <motor_c3+0x32>
	{
		PORTB = 0x08;
 698:	28 bb       	out	0x18, r18	; 24
 69a:	3f e3       	ldi	r19, 0x3F	; 63
 69c:	8d e0       	ldi	r24, 0x0D	; 13
 69e:	93 e0       	ldi	r25, 0x03	; 3
 6a0:	31 50       	subi	r19, 0x01	; 1
 6a2:	80 40       	sbci	r24, 0x00	; 0
 6a4:	90 40       	sbci	r25, 0x00	; 0
 6a6:	e1 f7       	brne	.-8      	; 0x6a0 <motor_c3+0x14>
 6a8:	00 c0       	rjmp	.+0      	; 0x6aa <motor_c3+0x1e>
 6aa:	00 00       	nop
}


void motor_c3()
{
	for(i=0; i<9; i++)
 6ac:	80 91 31 01 	lds	r24, 0x0131
 6b0:	90 91 32 01 	lds	r25, 0x0132
 6b4:	01 96       	adiw	r24, 0x01	; 1
 6b6:	90 93 32 01 	sts	0x0132, r25
 6ba:	80 93 31 01 	sts	0x0131, r24
 6be:	80 91 31 01 	lds	r24, 0x0131
 6c2:	90 91 32 01 	lds	r25, 0x0132
 6c6:	09 97       	sbiw	r24, 0x09	; 9
 6c8:	3c f3       	brlt	.-50     	; 0x698 <motor_c3+0xc>
	{
		PORTB = 0x08;
		_delay_ms(1000);
	}
	PORTB = 0x00;
 6ca:	18 ba       	out	0x18, r1	; 24
 6cc:	08 95       	ret

000006ce <motor_d3>:
}


void motor_d3()
{
	for(i=0; i<12; i++)
 6ce:	10 92 32 01 	sts	0x0132, r1
 6d2:	10 92 31 01 	sts	0x0131, r1
	{
		PORTB = 0x08;
 6d6:	28 e0       	ldi	r18, 0x08	; 8
}


void motor_d3()
{
	for(i=0; i<12; i++)
 6d8:	13 c0       	rjmp	.+38     	; 0x700 <motor_d3+0x32>
	{
		PORTB = 0x08;
 6da:	28 bb       	out	0x18, r18	; 24
 6dc:	3f e3       	ldi	r19, 0x3F	; 63
 6de:	8d e0       	ldi	r24, 0x0D	; 13
 6e0:	93 e0       	ldi	r25, 0x03	; 3
 6e2:	31 50       	subi	r19, 0x01	; 1
 6e4:	80 40       	sbci	r24, 0x00	; 0
 6e6:	90 40       	sbci	r25, 0x00	; 0
 6e8:	e1 f7       	brne	.-8      	; 0x6e2 <motor_d3+0x14>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <motor_d3+0x1e>
 6ec:	00 00       	nop
}


void motor_d3()
{
	for(i=0; i<12; i++)
 6ee:	80 91 31 01 	lds	r24, 0x0131
 6f2:	90 91 32 01 	lds	r25, 0x0132
 6f6:	01 96       	adiw	r24, 0x01	; 1
 6f8:	90 93 32 01 	sts	0x0132, r25
 6fc:	80 93 31 01 	sts	0x0131, r24
 700:	80 91 31 01 	lds	r24, 0x0131
 704:	90 91 32 01 	lds	r25, 0x0132
 708:	0c 97       	sbiw	r24, 0x0c	; 12
 70a:	3c f3       	brlt	.-50     	; 0x6da <motor_d3+0xc>
	{
		PORTB = 0x08;
		_delay_ms(1000);
	}
	PORTB = 0x00;
 70c:	18 ba       	out	0x18, r1	; 24
 70e:	08 95       	ret

00000710 <init_coke>:



void init_coke()
{
	portOut();
 710:	0e 94 67 00 	call	0xce	; 0xce <portOut>
	LCDInit();
 714:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCDInit>

	setPosition(0, 0);
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	0e 94 cb 00 	call	0x196	; 0x196 <setPosition>
	writeSTR("coke");
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	91 e0       	ldi	r25, 0x01	; 1
 724:	0e 94 89 00 	call	0x112	; 0x112 <writeSTR>

	setPosition(1, 0);
 728:	60 e0       	ldi	r22, 0x00	; 0
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	0e 94 cb 00 	call	0x196	; 0x196 <setPosition>
	writeChar('>');
 730:	8e e3       	ldi	r24, 0x3E	; 62
 732:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <writeChar>

00000736 <init_cider>:
}

void init_cider()
{
	portOut();
 736:	0e 94 67 00 	call	0xce	; 0xce <portOut>
	LCDInit();
 73a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCDInit>

	setPosition(0, 0);
 73e:	60 e0       	ldi	r22, 0x00	; 0
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	0e 94 cb 00 	call	0x196	; 0x196 <setPosition>
	writeSTR("cider");
 746:	86 e0       	ldi	r24, 0x06	; 6
 748:	91 e0       	ldi	r25, 0x01	; 1
 74a:	0e 94 89 00 	call	0x112	; 0x112 <writeSTR>

	setPosition(1, 0);
 74e:	60 e0       	ldi	r22, 0x00	; 0
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	0e 94 cb 00 	call	0x196	; 0x196 <setPosition>
	writeChar('>');
 756:	8e e3       	ldi	r24, 0x3E	; 62
 758:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <writeChar>

0000075c <init_coffee>:
}

void init_coffee()
{
	portOut();
 75c:	0e 94 67 00 	call	0xce	; 0xce <portOut>
	LCDInit();
 760:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCDInit>

	setPosition(0, 0);
 764:	60 e0       	ldi	r22, 0x00	; 0
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	0e 94 cb 00 	call	0x196	; 0x196 <setPosition>
	writeSTR("coffee");
 76c:	8c e0       	ldi	r24, 0x0C	; 12
 76e:	91 e0       	ldi	r25, 0x01	; 1
 770:	0e 94 89 00 	call	0x112	; 0x112 <writeSTR>

	setPosition(1, 0);
 774:	60 e0       	ldi	r22, 0x00	; 0
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	0e 94 cb 00 	call	0x196	; 0x196 <setPosition>
	writeChar('>');
 77c:	8e e3       	ldi	r24, 0x3E	; 62
 77e:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <writeChar>

00000782 <init_milk>:
}

void init_milk()
{
	portOut();
 782:	0e 94 67 00 	call	0xce	; 0xce <portOut>
	LCDInit();
 786:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCDInit>

	setPosition(0, 0);
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	0e 94 cb 00 	call	0x196	; 0x196 <setPosition>
	writeSTR("milk");
 792:	83 e1       	ldi	r24, 0x13	; 19
 794:	91 e0       	ldi	r25, 0x01	; 1
 796:	0e 94 89 00 	call	0x112	; 0x112 <writeSTR>

	setPosition(1, 0);
 79a:	60 e0       	ldi	r22, 0x00	; 0
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	0e 94 cb 00 	call	0x196	; 0x196 <setPosition>
	writeChar('>');
 7a2:	8e e3       	ldi	r24, 0x3E	; 62
 7a4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <writeChar>

000007a8 <init_keypad>:
}

void init_keypad()
{
	DDRC = 0x0F;
 7a8:	8f e0       	ldi	r24, 0x0F	; 15
 7aa:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 7ac:	15 ba       	out	0x15, r1	; 21
	
	portOut();
 7ae:	0e 94 67 00 	call	0xce	; 0xce <portOut>
	LCDInit();
 7b2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCDInit>

	setPosition(0, 0);
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	0e 94 cb 00 	call	0x196	; 0x196 <setPosition>
	writeSTR("Choose drink");
 7be:	88 e1       	ldi	r24, 0x18	; 24
 7c0:	91 e0       	ldi	r25, 0x01	; 1
 7c2:	0e 94 89 00 	call	0x112	; 0x112 <writeSTR>

	setPosition(1, 0);
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	0e 94 cb 00 	call	0x196	; 0x196 <setPosition>
	writeChar('>');
 7ce:	8e e3       	ldi	r24, 0x3E	; 62
 7d0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <writeChar>

000007d4 <back_pass>:
}

void back_pass()
{
	if(cnt != 0)
 7d4:	60 91 30 01 	lds	r22, 0x0130
 7d8:	66 23       	and	r22, r22
 7da:	81 f0       	breq	.+32     	; 0x7fc <back_pass+0x28>
	{			
		setPosition(1, cnt);
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	0e 94 cb 00 	call	0x196	; 0x196 <setPosition>
		writeChar(' ');
 7e2:	80 e2       	ldi	r24, 0x20	; 32
 7e4:	0e 94 7c 00 	call	0xf8	; 0xf8 <writeChar>

		setPosition(1, cnt);
 7e8:	60 91 30 01 	lds	r22, 0x0130
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	0e 94 cb 00 	call	0x196	; 0x196 <setPosition>
		cnt--;
 7f2:	80 91 30 01 	lds	r24, 0x0130
 7f6:	81 50       	subi	r24, 0x01	; 1
 7f8:	80 93 30 01 	sts	0x0130, r24
	}
	
	while((PINC & 0xF0) != 0xF0);
 7fc:	83 b3       	in	r24, 0x13	; 19
 7fe:	80 7f       	andi	r24, 0xF0	; 240
 800:	80 3f       	cpi	r24, 0xF0	; 240
 802:	e1 f7       	brne	.-8      	; 0x7fc <back_pass+0x28>
}
 804:	08 95       	ret

00000806 <reset_check>:

void reset_check()
{
	unsigned char i;
	clearLCD();
 806:	0e 94 35 01 	call	0x26a	; 0x26a <clearLCD>
 80a:	83 ec       	ldi	r24, 0xC3	; 195
 80c:	99 e0       	ldi	r25, 0x09	; 9
 80e:	01 97       	sbiw	r24, 0x01	; 1
 810:	f1 f7       	brne	.-4      	; 0x80e <reset_check+0x8>
 812:	00 c0       	rjmp	.+0      	; 0x814 <reset_check+0xe>
 814:	00 00       	nop
	_delay_ms(10);

	setPosition(0,0);
 816:	60 e0       	ldi	r22, 0x00	; 0
 818:	80 e0       	ldi	r24, 0x00	; 0
 81a:	0e 94 cb 00 	call	0x196	; 0x196 <setPosition>
	writeSTR("Reset!!");
 81e:	85 e2       	ldi	r24, 0x25	; 37
 820:	91 e0       	ldi	r25, 0x01	; 1
 822:	0e 94 89 00 	call	0x112	; 0x112 <writeSTR>
 826:	9f e3       	ldi	r25, 0x3F	; 63
 828:	2d e0       	ldi	r18, 0x0D	; 13
 82a:	83 e0       	ldi	r24, 0x03	; 3
 82c:	91 50       	subi	r25, 0x01	; 1
 82e:	20 40       	sbci	r18, 0x00	; 0
 830:	80 40       	sbci	r24, 0x00	; 0
 832:	e1 f7       	brne	.-8      	; 0x82c <reset_check+0x26>
 834:	00 c0       	rjmp	.+0      	; 0x836 <reset_check+0x30>
 836:	00 00       	nop
	_delay_ms(1000);

	setPosition(0,0);
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	80 e0       	ldi	r24, 0x00	; 0
 83c:	0e 94 cb 00 	call	0x196	; 0x196 <setPosition>
	writeSTR("Choose drink");
 840:	88 e1       	ldi	r24, 0x18	; 24
 842:	91 e0       	ldi	r25, 0x01	; 1
 844:	0e 94 89 00 	call	0x112	; 0x112 <writeSTR>

	setPosition(1,0);
 848:	60 e0       	ldi	r22, 0x00	; 0
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	0e 94 cb 00 	call	0x196	; 0x196 <setPosition>
	writeChar('>');
 850:	8e e3       	ldi	r24, 0x3E	; 62
 852:	0e 94 7c 00 	call	0xf8	; 0xf8 <writeChar>

	cnt = 0;
 856:	10 92 30 01 	sts	0x0130, r1
	loop = 1;
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	80 93 00 01 	sts	0x0100, r24

	while((PINC & 0xF0) != 0xF0);
 860:	83 b3       	in	r24, 0x13	; 19
 862:	80 7f       	andi	r24, 0xF0	; 240
 864:	80 3f       	cpi	r24, 0xF0	; 240
 866:	e1 f7       	brne	.-8      	; 0x860 <reset_check+0x5a>
}
 868:	08 95       	ret

0000086a <passcheck>:

unsigned char data;

void passcheck(unsigned char data)
{
 86a:	cf 93       	push	r28
 86c:	c8 2f       	mov	r28, r24
	if(cnt != 1)
 86e:	80 91 30 01 	lds	r24, 0x0130
 872:	81 30       	cpi	r24, 0x01	; 1
 874:	71 f0       	breq	.+28     	; 0x892 <passcheck+0x28>
	{	
		writeChar(data);
 876:	8c 2f       	mov	r24, r28
 878:	0e 94 7c 00 	call	0xf8	; 0xf8 <writeChar>
		pass[cnt++] = data;		
 87c:	80 91 30 01 	lds	r24, 0x0130
 880:	e8 2f       	mov	r30, r24
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	e2 5d       	subi	r30, 0xD2	; 210
 886:	fe 4f       	sbci	r31, 0xFE	; 254
 888:	c0 83       	st	Z, r28
 88a:	8f 5f       	subi	r24, 0xFF	; 255
 88c:	80 93 30 01 	sts	0x0130, r24
 890:	09 c0       	rjmp	.+18     	; 0x8a4 <passcheck+0x3a>
	}
	else if(cnt == 1)
	{
		writeChar(data);
 892:	8c 2f       	mov	r24, r28
 894:	0e 94 7c 00 	call	0xf8	; 0xf8 <writeChar>
		pass[cnt] = data;
 898:	e0 91 30 01 	lds	r30, 0x0130
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	e2 5d       	subi	r30, 0xD2	; 210
 8a0:	fe 4f       	sbci	r31, 0xFE	; 254
 8a2:	c0 83       	st	Z, r28

	}
}
 8a4:	cf 91       	pop	r28
 8a6:	08 95       	ret

000008a8 <get_passwd>:

void get_passwd()
{
	PORTC =	IN_0;
 8a8:	8e e0       	ldi	r24, 0x0E	; 14
 8aa:	85 bb       	out	0x15, r24	; 21
 8ac:	89 ef       	ldi	r24, 0xF9	; 249
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	01 97       	sbiw	r24, 0x01	; 1
 8b2:	f1 f7       	brne	.-4      	; 0x8b0 <get_passwd+0x8>
 8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <get_passwd+0xe>
 8b6:	00 00       	nop
	_delay_ms(1);
		
	if((PINC & LINE_0) == 0)
 8b8:	9c 99       	sbic	0x13, 4	; 19
 8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <get_passwd+0x1a>
	{
		motor_a();
 8bc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <motor_a>
 8c0:	0d c0       	rjmp	.+26     	; 0x8dc <get_passwd+0x34>
	}
	else if((PINC & LINE_1) == 0)
 8c2:	9d 99       	sbic	0x13, 5	; 19
 8c4:	03 c0       	rjmp	.+6      	; 0x8cc <get_passwd+0x24>
	{
		motor_a1();
 8c6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <motor_a1>
 8ca:	08 c0       	rjmp	.+16     	; 0x8dc <get_passwd+0x34>
	}
	else if((PINC & LINE_2) == 0)
 8cc:	9e 99       	sbic	0x13, 6	; 19
 8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <get_passwd+0x2e>
	{
		motor_a2();
 8d0:	0e 94 80 02 	call	0x500	; 0x500 <motor_a2>
 8d4:	03 c0       	rjmp	.+6      	; 0x8dc <get_passwd+0x34>
	}
	else if((PINC & LINE_3) == 0)
 8d6:	9f 9b       	sbis	0x13, 7	; 19
	{
		motor_a3();
 8d8:	0e 94 04 03 	call	0x608	; 0x608 <motor_a3>
 8dc:	83 ec       	ldi	r24, 0xC3	; 195
 8de:	99 e0       	ldi	r25, 0x09	; 9
 8e0:	01 97       	sbiw	r24, 0x01	; 1
 8e2:	f1 f7       	brne	.-4      	; 0x8e0 <get_passwd+0x38>
 8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <get_passwd+0x3e>
 8e6:	00 00       	nop
	}
	_delay_ms(10);		
	

	PORTC =	IN_1;
 8e8:	8d e0       	ldi	r24, 0x0D	; 13
 8ea:	85 bb       	out	0x15, r24	; 21
 8ec:	89 ef       	ldi	r24, 0xF9	; 249
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	01 97       	sbiw	r24, 0x01	; 1
 8f2:	f1 f7       	brne	.-4      	; 0x8f0 <get_passwd+0x48>
 8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <get_passwd+0x4e>
 8f6:	00 00       	nop
	_delay_ms(1);
		
	if((PINC & LINE_0) == 0)
 8f8:	9c 99       	sbic	0x13, 4	; 19
 8fa:	03 c0       	rjmp	.+6      	; 0x902 <get_passwd+0x5a>
	{
		motor_b();
 8fc:	0e 94 99 01 	call	0x332	; 0x332 <motor_b>
 900:	0d c0       	rjmp	.+26     	; 0x91c <get_passwd+0x74>
	}
	else if((PINC & LINE_1) == 0)
 902:	9d 99       	sbic	0x13, 5	; 19
 904:	03 c0       	rjmp	.+6      	; 0x90c <get_passwd+0x64>
	{
		motor_b1();
 906:	0e 94 1d 02 	call	0x43a	; 0x43a <motor_b1>
 90a:	08 c0       	rjmp	.+16     	; 0x91c <get_passwd+0x74>
	}
	else if((PINC & LINE_2) == 0)
 90c:	9e 99       	sbic	0x13, 6	; 19
 90e:	03 c0       	rjmp	.+6      	; 0x916 <get_passwd+0x6e>
	{
		motor_b2();
 910:	0e 94 a1 02 	call	0x542	; 0x542 <motor_b2>
 914:	03 c0       	rjmp	.+6      	; 0x91c <get_passwd+0x74>
	}
	else if((PINC & LINE_3) == 0)
 916:	9f 9b       	sbis	0x13, 7	; 19
	{
		motor_b3();
 918:	0e 94 25 03 	call	0x64a	; 0x64a <motor_b3>
 91c:	83 ec       	ldi	r24, 0xC3	; 195
 91e:	99 e0       	ldi	r25, 0x09	; 9
 920:	01 97       	sbiw	r24, 0x01	; 1
 922:	f1 f7       	brne	.-4      	; 0x920 <get_passwd+0x78>
 924:	00 c0       	rjmp	.+0      	; 0x926 <get_passwd+0x7e>
 926:	00 00       	nop
	}
	_delay_ms(10);		
	

	PORTC =	IN_2;
 928:	8b e0       	ldi	r24, 0x0B	; 11
 92a:	85 bb       	out	0x15, r24	; 21
 92c:	89 ef       	ldi	r24, 0xF9	; 249
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	01 97       	sbiw	r24, 0x01	; 1
 932:	f1 f7       	brne	.-4      	; 0x930 <get_passwd+0x88>
 934:	00 c0       	rjmp	.+0      	; 0x936 <get_passwd+0x8e>
 936:	00 00       	nop
	_delay_ms(1);
		
	if((PINC & LINE_0) == 0)
 938:	9c 99       	sbic	0x13, 4	; 19
 93a:	03 c0       	rjmp	.+6      	; 0x942 <get_passwd+0x9a>
	{
		motor_c();
 93c:	0e 94 ba 01 	call	0x374	; 0x374 <motor_c>
 940:	0d c0       	rjmp	.+26     	; 0x95c <get_passwd+0xb4>
	}
	else if((PINC & LINE_1) == 0)
 942:	9d 99       	sbic	0x13, 5	; 19
 944:	03 c0       	rjmp	.+6      	; 0x94c <get_passwd+0xa4>
	{
		motor_c1();
 946:	0e 94 3e 02 	call	0x47c	; 0x47c <motor_c1>
 94a:	08 c0       	rjmp	.+16     	; 0x95c <get_passwd+0xb4>
	}
	else if((PINC & LINE_2) == 0)
 94c:	9e 99       	sbic	0x13, 6	; 19
 94e:	03 c0       	rjmp	.+6      	; 0x956 <get_passwd+0xae>
	{
		motor_c2();
 950:	0e 94 c2 02 	call	0x584	; 0x584 <motor_c2>
 954:	03 c0       	rjmp	.+6      	; 0x95c <get_passwd+0xb4>
	}
	else if((PINC & LINE_3) == 0)
 956:	9f 9b       	sbis	0x13, 7	; 19
	{
		motor_c3();
 958:	0e 94 46 03 	call	0x68c	; 0x68c <motor_c3>
 95c:	83 ec       	ldi	r24, 0xC3	; 195
 95e:	99 e0       	ldi	r25, 0x09	; 9
 960:	01 97       	sbiw	r24, 0x01	; 1
 962:	f1 f7       	brne	.-4      	; 0x960 <get_passwd+0xb8>
 964:	00 c0       	rjmp	.+0      	; 0x966 <get_passwd+0xbe>
 966:	00 00       	nop
	}
	_delay_ms(10);		
	

	PORTC =	IN_3;
 968:	87 e0       	ldi	r24, 0x07	; 7
 96a:	85 bb       	out	0x15, r24	; 21
 96c:	89 ef       	ldi	r24, 0xF9	; 249
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	01 97       	sbiw	r24, 0x01	; 1
 972:	f1 f7       	brne	.-4      	; 0x970 <get_passwd+0xc8>
 974:	00 c0       	rjmp	.+0      	; 0x976 <get_passwd+0xce>
 976:	00 00       	nop
	_delay_ms(1);
		
	if((PINC & LINE_0) == 0)
 978:	9c 99       	sbic	0x13, 4	; 19
 97a:	03 c0       	rjmp	.+6      	; 0x982 <get_passwd+0xda>
	{
		motor_d();
 97c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <motor_d>
 980:	0d c0       	rjmp	.+26     	; 0x99c <get_passwd+0xf4>
	}
	else if((PINC & LINE_1) == 0)
 982:	9d 99       	sbic	0x13, 5	; 19
 984:	03 c0       	rjmp	.+6      	; 0x98c <get_passwd+0xe4>
	{
		motor_d1();
 986:	0e 94 5f 02 	call	0x4be	; 0x4be <motor_d1>
 98a:	08 c0       	rjmp	.+16     	; 0x99c <get_passwd+0xf4>
	}
	else if((PINC & LINE_2) == 0)
 98c:	9e 99       	sbic	0x13, 6	; 19
 98e:	03 c0       	rjmp	.+6      	; 0x996 <get_passwd+0xee>
	{
		motor_d2();
 990:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <motor_d2>
 994:	03 c0       	rjmp	.+6      	; 0x99c <get_passwd+0xf4>
	}
	else if((PINC & LINE_3) == 0)
 996:	9f 9b       	sbis	0x13, 7	; 19
	{
		motor_d3();
 998:	0e 94 67 03 	call	0x6ce	; 0x6ce <motor_d3>
 99c:	83 ec       	ldi	r24, 0xC3	; 195
 99e:	99 e0       	ldi	r25, 0x09	; 9
 9a0:	01 97       	sbiw	r24, 0x01	; 1
 9a2:	f1 f7       	brne	.-4      	; 0x9a0 <get_passwd+0xf8>
 9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <get_passwd+0xfe>
 9a6:	00 00       	nop
 9a8:	08 95       	ret

000009aa <main>:
#include "keypad.h"

int main()
{
	init_keypad();
 9aa:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <init_keypad>
	DDRB = 0xFF;
 9ae:	8f ef       	ldi	r24, 0xFF	; 255
 9b0:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
 9b2:	18 ba       	out	0x18, r1	; 24

	for(;;)
	{
		get_passwd();
 9b4:	0e 94 54 04 	call	0x8a8	; 0x8a8 <get_passwd>
 9b8:	fd cf       	rjmp	.-6      	; 0x9b4 <main+0xa>

000009ba <_exit>:
 9ba:	f8 94       	cli

000009bc <__stop_program>:
 9bc:	ff cf       	rjmp	.-2      	; 0x9bc <__stop_program>
